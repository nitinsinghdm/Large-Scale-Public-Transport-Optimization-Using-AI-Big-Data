# -*- coding: utf-8 -*-
"""Data Cleaning Dissertation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ioQ-M650bBwT48wQiE9TwZJ1S8kZTADI
"""

from google.colab import drive
drive.mount('/content/drive')

"""Agency"""

import pandas as pd

file_path = '/content/drive/MyDrive/Dissertation/GFTS/agency.csv'

# Load the dataset
agency_df = pd.read_csv(file_path)

# Fill missing agency_lang with 'de'
agency_df['agency_lang'] = agency_df['agency_lang'].fillna('de')

# Fill missing phone with 'Not Available'
agency_df['agency_phone'] = agency_df['agency_phone'].fillna('Not Available')

agency_df.head()

print("Number of Agencies:", agency_df.shape[0])
print("\nMissing Values:\n", agency_df.isnull().sum())

import matplotlib.pyplot as plt

# Count agencies by name
agency_counts = agency_df['agency_name'].value_counts().head(34)

# Bar chart
plt.figure(figsize=(10, 6))
agency_counts.plot(kind='barh')
plt.title('Transport Agencies in Berlin GTFS Data')
plt.xlabel('Count')
plt.ylabel('Agency Name')
plt.gca().invert_yaxis()
plt.grid(True)
plt.tight_layout()
plt.show()

"""Calendar"""

# Load calendar.csv
calendar_path = '/content/drive/MyDrive/Dissertation/GFTS/calendar.csv'
calendar_df = pd.read_csv(calendar_path)

# Preview
calendar_df.head()

# Check for missing values and data types
calendar_df.info()
calendar_df.isnull().sum()

# Convert start_date and end_date to datetime
calendar_df['start_date'] = pd.to_datetime(calendar_df['start_date'], format='%Y%m%d')
calendar_df['end_date'] = pd.to_datetime(calendar_df['end_date'], format='%Y%m%d')

# Add a column that counts how many days per week the service runs
calendar_df['service_days'] = calendar_df[['monday','tuesday','wednesday','thursday','friday','saturday','sunday']].sum(axis=1)

calendar_df.head()

# Count how many services run each day of the week
day_counts = calendar_df[['monday','tuesday','wednesday','thursday','friday','saturday','sunday']].sum()

# Plot
plt.figure(figsize=(8, 5))
day_counts.plot(kind='bar', color='skyblue')
plt.title('Number of Services Running Each Day of the Week')
plt.ylabel('Service Count')
plt.xlabel('Day')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

"""Calendar Dates"""

# Load calendar_dates.csv
calendar_dates_path = '/content/drive/MyDrive/Dissertation/GFTS/calendar_dates.csv'
calendar_dates_df = pd.read_csv(calendar_dates_path)

# Preview
calendar_dates_df.head()

# Convert date column to datetime
calendar_dates_df['date'] = pd.to_datetime(calendar_dates_df['date'], format='%Y%m%d')

# Check for missing values
calendar_dates_df.isnull().sum()

calendar_dates_df.head()

# 1 = added service, 2 = removed service
exception_counts = calendar_dates_df['exception_type'].value_counts().rename({1: 'Added', 2: 'Removed'})

# Plot
exception_counts.plot(kind='bar', color=['green', 'red'], title='Service Exceptions (Added vs Removed)')
plt.ylabel('Number of Entries')
plt.grid(True)
plt.tight_layout()
plt.show()

# Number of service exceptions per day
date_counts = calendar_dates_df['date'].value_counts().sort_index()

# Plot time series
plt.figure(figsize=(12, 5))
date_counts.plot()
plt.title('Service Exceptions Over Time')
plt.xlabel('Date')
plt.ylabel('Number of Exceptions')
plt.grid(True)
plt.tight_layout()
plt.show()

"""Routes"""

# Load routes.csv
routes_path = '/content/drive/MyDrive/Dissertation/GFTS/routes.csv'
routes_df = pd.read_csv(routes_path)

# Preview
routes_df.head()

# Check for missing values
routes_df.isnull().sum()

# Basic shape
print(f"Number of routes: {routes_df.shape[0]}")

# Map route_type codes to names
route_type_map = {
    0: 'Tram',
    1: 'Subway',
    2: 'Rail',
    3: 'Bus',
    7: 'Funicular',
    11: 'Trolleybus'
}
routes_df['route_type_name'] = routes_df['route_type'].map(route_type_map).fillna('Other')

# Count types
type_counts = routes_df['route_type_name'].value_counts()

# Plot
type_counts.plot(kind='bar', color='dodgerblue', title='Route Types in Berlin GTFS')
plt.ylabel('Number of Routes')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# Show unique route names
routes_df[['route_id', 'route_short_name', 'route_long_name','route_type_name']].drop_duplicates().head(10)

"""Trips"""

# Load trips.csv
trips_path = '/content/drive/MyDrive/Dissertation/GFTS/trips.csv'
trips_df = pd.read_csv(trips_path)

# Preview
trips_df.head()

# Check for missing values
trips_df.isnull().sum()

# Basic dimensions
print(f"Number of trips: {trips_df.shape[0]}")

# Count trips by route_id
trip_counts = trips_df['route_id'].value_counts().head(10)

# Plot
trip_counts.plot(kind='bar', figsize=(10, 5), title='Top 10 Routes by Trip Count', color='orange')
plt.xlabel('Route ID')
plt.ylabel('Number of Trips')
plt.grid(True)
plt.tight_layout()
plt.show()

# Count trips per service_id
service_trip_counts = trips_df['service_id'].value_counts().head(10)

# Plot
service_trip_counts.plot(kind='bar', figsize=(10, 5), title='Top Service IDs by Trip Count', color='seagreen')
plt.xlabel('Service ID')
plt.ylabel('Number of Trips')
plt.grid(True)
plt.tight_layout()
plt.show()

"""Stop Times"""

# Load stop_times.csv
stop_times_path = '/content/drive/MyDrive/Dissertation/GFTS/stop_times.csv'
stop_times_df = pd.read_csv(stop_times_path)

# Preview
stop_times_df.head()

# Check for missing values
stop_times_df.isnull().sum()

# Convert time strings to proper datetime.time objects
# Handles times like 25:30:00 (next day), so we split for now
stop_times_df[['arrival_hour', 'arrival_min', 'arrival_sec']] = stop_times_df['arrival_time'].str.split(':', expand=True).astype(int)
stop_times_df[['departure_hour', 'departure_min', 'departure_sec']] = stop_times_df['departure_time'].str.split(':', expand=True).astype(int)

# Optional: filter out weirdly large hour values (e.g., 30+)
stop_times_df = stop_times_df[stop_times_df['arrival_hour'] < 30]

# Count stops per trip
stops_per_trip = stop_times_df['trip_id'].value_counts().head(20)

# Plot
stops_per_trip.plot(kind='bar', figsize=(12, 5), title='Number of Stops for Top 20 Trips', color='purple')
plt.xlabel('Trip ID')
plt.ylabel('Stop Count')
plt.grid(True)
plt.tight_layout()
plt.show()

# Explore first and last stop times per trip (optional if time columns are cleaned)
stop_times_df['stop_sequence'] = stop_times_df['stop_sequence'].astype(int)
stop_times_df_sorted = stop_times_df.sort_values(['trip_id', 'stop_sequence'])

# Preview a full trip
example_trip = stop_times_df_sorted[stop_times_df_sorted['trip_id'] == stop_times_df_sorted['trip_id'].iloc[0]]
example_trip[['trip_id', 'stop_id', 'arrival_time', 'departure_time', 'stop_sequence']].head(10)

"""Stops"""

# Load stops.csv
stops_path = '/content/drive/MyDrive/Dissertation/GFTS/stops.csv'
stops_df = pd.read_csv(stops_path)

# Preview
stops_df.head()

# Check for nulls
stops_df.isnull().sum()

# Remove stops without coordinates
stops_df = stops_df.dropna(subset=['stop_lat', 'stop_lon'])

# Convert to float (if not already)
stops_df['stop_lat'] = stops_df['stop_lat'].astype(float)
stops_df['stop_lon'] = stops_df['stop_lon'].astype(float)

# Import matplotlib
import matplotlib.pyplot as plt

# Simple scatter plot of stop locations
plt.figure(figsize=(10, 8))
plt.scatter(stops_df['stop_lon'], stops_df['stop_lat'], s=1, alpha=0.6)
plt.title('Public Transport Stops in Berlin (VBB GTFS)')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.grid(True)
plt.tight_layout()
plt.show()

# The most common stop names
stops_df['stop_name'].value_counts().head(10)

"""Shapes"""

# Load shapes.csv
shapes_path = '/content/drive/MyDrive/Dissertation/GFTS/shapes.csv'
shapes_df = pd.read_csv(shapes_path)

# Preview
shapes_df.head()

# Check for missing values
shapes_df.isnull().sum()

# Convert to correct types
shapes_df['shape_pt_lat'] = shapes_df['shape_pt_lat'].astype(float)
shapes_df['shape_pt_lon'] = shapes_df['shape_pt_lon'].astype(float)
shapes_df['shape_pt_sequence'] = shapes_df['shape_pt_sequence'].astype(int)

# Sort points for line drawing
shapes_df_sorted = shapes_df.sort_values(by=['shape_id', 'shape_pt_sequence'])

# Plot a few shapes to keep it clean
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 8))
for shape_id in shapes_df_sorted['shape_id'].unique()[:10]:
    shape = shapes_df_sorted[shapes_df_sorted['shape_id'] == shape_id]
    plt.plot(shape['shape_pt_lon'], shape['shape_pt_lat'], linewidth=1)

plt.title('Sample Route Paths (shape_id) in Berlin')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.grid(True)
plt.tight_layout()
plt.show()

# Merge shape info with trips to see how many trips use each shape
merged = trips_df[['trip_id', 'shape_id']].merge(shapes_df_sorted, on='shape_id', how='left')
merged.head()

"""Transfers"""

# Load transfers.csv
transfers_path = '/content/drive/MyDrive/Dissertation/GFTS/transfers.csv'
transfers_df = pd.read_csv(transfers_path)

# Preview
transfers_df.head()

# Check for missing values and column types
transfers_df.info()
transfers_df.isnull().sum()

# Count types of transfers
transfer_types = transfers_df['transfer_type'].value_counts().sort_index()

# Plot
transfer_types.plot(kind='bar', title='Types of Transfers', color='teal')
plt.xticks(ticks=[0, 1, 2, 3], labels=['Recommended', 'Timed', 'Min Time', 'Not Allowed'], rotation=0)
plt.ylabel('Count')
plt.grid(True)
plt.tight_layout()
plt.show()

# Only show transfers that require a minimum time
if 'min_transfer_time' in transfers_df.columns:
    long_transfers = transfers_df.sort_values('min_transfer_time', ascending=False).head(10)
    long_transfers
else:
    print("No min_transfer_time column found in this dataset.")

"""Levels"""

# Load levels.csv
levels_path = '/content/drive/MyDrive/Dissertation/GFTS/levels.csv'
levels_df = pd.read_csv(levels_path)

# Preview
levels_df.head()

# Basic info
levels_df.info()

# Check for missing values
levels_df.isnull().sum()

# Sort levels by vertical_index (lower = deeper underground)
levels_df_sorted = levels_df.sort_values('level_index')

# Preview
levels_df_sorted

# Count occurrences of each level index
levels_df['level_index'].value_counts().sort_index().plot(kind='bar', color='slateblue')
plt.title('Distribution of Vertical Levels (GTFS)')
plt.xlabel('Level Index (Higher = Elevated)')
plt.ylabel('Count')
plt.grid(True)
plt.tight_layout()
plt.show()

"""Pathways"""

# Load pathways.csv
pathways_path = '/content/drive/MyDrive/Dissertation/GFTS/pathways.csv'
pathways_df = pd.read_csv(pathways_path)

# Preview
pathways_df.head()

# Check for missing values and info
pathways_df.info()
pathways_df.isnull().sum()

# Count types of pathways
pathway_labels = {
    1: 'Walkway', 2: 'Stairs', 3: 'Moving sidewalk',
    4: 'Escalator', 5: 'Elevator', 6: 'Fare gate', 7: 'Exit gate'
}
pathways_df['pathway_mode_label'] = pathways_df['pathway_mode'].map(pathway_labels)

# Plot distribution
pathways_df['pathway_mode_label'].value_counts().plot(kind='bar', color='darkcyan')
plt.title('Types of Pathways Inside Stations')
plt.xlabel('Pathway Type')
plt.ylabel('Count')
plt.grid(True)
plt.tight_layout()
plt.show()

# Sort by traversal_time
pathways_df[['from_stop_id', 'to_stop_id', 'pathway_mode_label', 'traversal_time']].sort_values('traversal_time', ascending=False).head(10)